package misc;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

/**
 * @author Nhan Nguyen (nguyenbanhan@gmail.com)
 */
public class ShowTicket {

  public static void main(String[] args) {
    int[] input = {87, 896, 88, 978, 3, 529, 708, 301, 414, 38, 382, 719, 281, 548, 83, 665, 517, 360, 514, 166, 94, 851, 92, 981, 402, 320, 643, 12, 929, 946, 924, 540, 180, 857, 639, 9, 575, 51, 547, 705, 664, 500, 428, 826, 416, 272, 63, 893, 343, 782, 466, 167, 161, 700, 422, 509, 925, 471, 767, 685, 402, 562, 496, 1, 577, 299, 456, 484, 784, 803, 449, 180, 179, 660, 941, 728, 779, 515, 746, 978, 504, 189, 661, 580, 352, 259, 656, 140, 280, 551, 581, 449, 967, 367, 89, 77, 623, 143, 748, 370, 29, 360, 926, 151, 358, 933, 817, 563, 850, 586, 771, 278, 67, 237, 218, 172, 908, 247, 887, 411, 219, 122, 838, 961, 553, 497, 914, 985, 430, 188, 987, 28, 119, 171, 105, 258, 258, 120, 535, 800, 590, 736, 619, 841, 358, 872, 762, 560, 372, 329, 174, 505, 943, 461, 889, 797, 375, 914, 369, 60, 109, 372, 588, 18, 102, 964, 635, 372, 983, 229, 808, 98, 567, 819, 289, 580, 609, 996, 364, 823, 185, 200, 443, 455, 284, 203, 847, 988, 626, 999, 311, 383, 957, 148, 968, 307, 449, 698, 11, 638, 996, 755, 412, 567, 349, 459, 670, 151, 838, 377, 50, 2, 259, 229, 607, 5, 962, 922, 896, 911, 458, 643, 131, 458, 262, 407, 206, 648, 849, 598, 282, 760, 698, 571, 834, 48, 743, 946, 410, 922, 203, 657, 777, 569, 153, 272, 113, 442, 552, 875, 372, 166, 206, 196, 406, 300, 47, 467, 551, 193, 582, 616, 320, 889, 664, 36, 514, 196, 717, 422, 380, 316, 248, 674, 548, 811, 228, 569, 610, 591, 14, 293, 746, 584, 823, 483, 256, 582, 65, 825, 235, 477, 359, 159, 68, 618, 487, 720, 766, 796, 9, 263, 909, 62, 150, 932, 905, 241, 179, 982, 18, 124, 478, 841, 386, 246, 5, 999, 200, 647, 964, 360, 489, 196, 869, 116, 887, 946, 623, 684, 756, 912, 521, 198, 253, 391, 749, 880, 144, 267, 975, 618, 624, 704, 318, 982, 486, 79, 911, 281, 751, 456, 591, 993, 858, 336, 631, 406, 792, 682, 879, 107, 300, 991, 573, 115, 75, 152, 548, 486, 315, 912, 552, 539, 965, 228, 118, 829, 972, 956, 38, 801, 996, 113, 202, 515, 886, 39, 558, 814, 496, 186, 912, 339, 271, 946, 446, 878, 880, 672, 956, 421, 591, 313, 933, 322, 576, 656, 399, 950, 540, 181, 682, 286, 264, 18, 975, 408, 44, 185, 178, 436, 327, 345, 489, 908, 13, 849, 228, 702, 827, 121, 349, 110, 855, 157, 423, 439, 482, 163, 513, 393, 255, 369, 266, 937, 875, 610, 988, 605, 237, 224, 754, 919, 997, 640, 427, 887, 526, 307, 391, 467, 565, 561, 990, 353, 945, 949, 382, 209, 283, 277, 108, 165, 765, 977, 95, 937, 997, 545, 305, 461, 104, 505, 255, 752, 385, 95, 126, 84, 241, 112, 934, 951, 190, 536, 520, 965, 182, 505, 305, 176, 218, 48, 135, 930, 237, 877, 288, 887, 925, 841, 535, 454, 206, 631, 73, 846, 515, 85, 169, 483, 343, 106, 474, 784, 381, 183, 235, 755, 69, 280, 361, 294, 584, 626, 610, 930, 104, 196, 454, 283, 363, 215, 94, 385, 295, 120, 47, 770, 205, 43, 413, 19, 679, 567, 458, 582, 843, 134, 382, 195, 911, 267, 982, 601, 125, 883, 15, 282, 238, 935, 409, 517, 48, 342, 30, 477, 826, 37, 722, 724, 340, 32, 314, 765, 530, 439, 111, 962, 623, 468, 18, 60, 412, 41, 471, 593, 96, 397, 372, 693, 422, 293, 40, 43, 332};
    multitasking(input, 334);
  }

  //FIXME still works incorrect
  public static long multitasking(int[] taskQueue, int n) {
    if (taskQueue == null || taskQueue.length == 0) {
      return 0;
    }
    int remainingTime = taskQueue[n] - 1;
    int rs = 1 + n;
    List<Integer> remainTime = toIntList(taskQueue);
    //offset to first run to 0
    for (int i = 0; i <= n; i++) {
      remainTime.set(i, remainTime.get(i) - 1);
    }

    Collections.sort(remainTime);

    // countdown the remaining tasks
    while (remainingTime > 0) {
      if (remainingTime > remainTime.get(0)) {
        rs += (remainTime.get(0) - 1) * remainTime.size();
        remainingTime -= remainTime.remove(0);
      } else {
        rs += (remainTime.size() - 1) * (remainingTime - 1);
        break;
      }
    }
    System.out.println(rs);
    return rs;
  }

  private static List<Integer> toIntList(int[] intArray) {
    List<Integer> intList = new ArrayList<>();
    for (int index = 0; index < intArray.length; index++) {
      intList.add(intArray[index]);
    }
    return intList;
  }
}
